// This is your Prisma schema file
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums
enum Role {
  USER
  AGENCY_OWNER
  AGENCY_MEMBER
  CLIENT
  ADMIN
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  TRIAL
}

enum SubscriptionPlan {
  FREE
  STARTER
  PRO
  AGENCY
  ENTERPRISE
}

enum ProjectType {
  WEBSITE
  BLOG
  ECOMMERCE
  SOCIAL_MEDIA
}

enum AuditStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum RankTrackingFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

// Models
model User {
  id                String              @id @default(uuid())
  name              String?
  email             String              @unique
  emailVerified     DateTime?
  password          String?
  image             String?
  role              Role                @default(USER)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  stripeCustomerId  String?             @unique
  accounts          Account[]
  sessions          Session[]
  organizations     OrganizationUser[]
  projects          Project[]
  notifications     Notification[]
  apiKeys           ApiKey[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Organization {
  id                String             @id @default(uuid())
  name              String
  slug              String             @unique
  logo              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  stripeCustomerId  String?            @unique
  users             OrganizationUser[]
  projects          Project[]
  subscription      Subscription?
  brandingSettings  BrandingSettings?
  apiKeys           ApiKey[]
}

model OrganizationUser {
  id             String       @id @default(uuid())
  organizationId String
  userId         String
  role           Role         @default(AGENCY_MEMBER)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model BrandingSettings {
  id                 String       @id @default(uuid())
  organizationId     String       @unique
  primaryColor       String       @default("#3b82f6")
  secondaryColor     String       @default("#10b981")
  accentColor        String       @default("#f59e0b")
  logoUrl            String?
  favicon            String?
  customDomain       String?
  whitelabelReports  Boolean      @default(false)
  emailTemplates     Boolean      @default(false)
  clientPortal       Boolean      @default(false)
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String             @id @default(uuid())
  organizationId       String             @unique
  plan                 SubscriptionPlan   @default(FREE)
  status               SubscriptionStatus @default(TRIAL)
  currentPeriodStart   DateTime           @default(now())
  currentPeriodEnd     DateTime
  trialEnd             DateTime?
  stripeSubscriptionId String?            @unique
  priceId              String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  organization         Organization       @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

model Project {
  id                   String               @id @default(uuid())
  name                 String
  url                  String
  type                 ProjectType          @default(WEBSITE)
  organizationId       String
  createdById          String
  targetCountry        String?
  targetLanguage       String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  organization         Organization         @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy            User                 @relation(fields: [createdById], references: [id])
  siteAudits           SiteAudit[]
  keywords             Keyword[]
  rankTracking         RankTracking[]
  contentAudits        ContentAudit[]
  backlinks            Backlink[]
  competitors          Competitor[]
  projectSettings      ProjectSettings?
  onPageAnalyses       OnPageAnalysis[]
  performanceSnapshots PerformanceSnapshot[]

  @@index([organizationId])
  @@index([createdById])
  @@index([url])
  AuditSchedule AuditSchedule[]
  AuditHistory AuditHistory[]
}

model ProjectSettings {
  id                 String             @id @default(uuid())
  projectId          String             @unique
  rankTrackingFreq   RankTrackingFrequency @default(WEEKLY)
  autoAuditFrequency RankTrackingFrequency @default(WEEKLY)
  emailAlerts        Boolean            @default(true)
  slackWebhookUrl    String?
  integrations       Json?
  project            Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model SiteAudit {
  id              String      @id @default(uuid())
  projectId       String
  siteUrl         String
  status          AuditStatus @default(PENDING)
  startedAt       DateTime    @default(now())
  completedAt     DateTime?
  totalPages      Int         @default(0)
  options         Json        // Store the audit options
  pageResults     Json?       // Store the detailed page results
  issuesSummary   Json        // Store the summary of issues
  errorMessage    String?     // Store error message if audit fails
  htmlReport      String?     // Path to generated HTML report
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  auditHistory    AuditHistory[]

  @@index([projectId])
  @@index([status])
}

model AuditHistory {
  id              String    @id @default(uuid())
  projectId       String
  auditId         String
  createdAt       DateTime  @default(now())
  totalPages      Int
  issuesSummary   Json
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  audit           SiteAudit @relation(fields: [auditId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([auditId])
}

model AuditSchedule {
  id              String    @id @default(uuid())
  projectId       String
  frequency       String    // daily, weekly, monthly
  lastRunAt       DateTime?
  nextRunAt       DateTime
  isActive        Boolean   @default(true)
  options         Json      // Same options structure as AuditOptions
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([nextRunAt])
  @@index([isActive])
}

model Keyword {
  id              String        @id @default(uuid())
  projectId       String
  keyword         String
  volume          Int?
  difficulty      Float?
  cpc             Float?
  intent          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  project         Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  rankTracking    RankTracking[]

  @@index([projectId])
}

model RankTracking {
  id              String      @id @default(uuid())
  projectId       String
  keywordId       String
  rank            Int?
  previousRank    Int?
  change          Int?        // Positive or negative change
  url             String?
  date            DateTime    @default(now())
  searchEngine    String      @default("google")
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  keyword         Keyword     @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([keywordId])
  @@index([date])
}

model ContentAudit {
  id              String      @id @default(uuid())
  projectId       String
  url             String
  title           String?
  wordCount       Int?
  readabilityScore Float?
  seoScore        Float?
  recommendations Json?
  screenshot      String?
  status          AuditStatus @default(PENDING)
  createdAt       DateTime    @default(now())
  completedAt     DateTime?
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([url])
}

model OnPageAnalysis {
  id              String      @id @default(uuid())
  projectId       String
  url             String
  title           String?
  metaDescription String?
  h1              String?
  h2Count         Int?
  imageCount      Int?
  wordCount       Int?
  internalLinks   Int?
  externalLinks   Int?
  missingAltText  Int?
  score           Float?
  recommendations Json?
  createdAt       DateTime    @default(now())
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([url])
}

model Backlink {
  id              String      @id @default(uuid())
  projectId       String
  sourceUrl       String
  targetUrl       String
  anchorText      String?
  dofollow        Boolean     @default(true)
  domainAuthority Float?
  pageAuthority   Float?
  firstDiscovered DateTime    @default(now())
  lastChecked     DateTime    @default(now())
  status          String      @default("ACTIVE")  // ACTIVE, LOST, NEW
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([sourceUrl])
  @@index([targetUrl])
}

model Competitor {
  id              String      @id @default(uuid())
  projectId       String
  name            String
  url             String
  keywordsOverlap Int?
  metrics         Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([url])
}

model PerformanceSnapshot {
  id              String      @id @default(uuid())
  projectId       String
  date            DateTime    @default(now())
  mobileScore     Float?
  desktopScore    Float?
  lcp             Float?      // Largest Contentful Paint
  fid             Float?      // First Input Delay
  cls             Float?      // Cumulative Layout Shift
  ttfb            Float?      // Time to First Byte
  metrics         Json?
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([date])
}

model Notification {
  id              String      @id @default(uuid())
  userId          String
  title           String
  message         String
  read            Boolean     @default(false)
  type            String      @default("INFO")  // INFO, WARNING, ERROR, SUCCESS
  link            String?
  createdAt       DateTime    @default(now())
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model ApiKey {
  id              String      @id @default(uuid())
  name            String
  key             String      @unique
  organizationId  String?
  userId          String?
  createdAt       DateTime    @default(now())
  expiresAt       DateTime?
  lastUsed        DateTime?
  organization    Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User?         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([userId])
}